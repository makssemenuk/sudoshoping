import os

from aiogram import Router, F
from aiogram.filters import CommandStart, Command, StateFilter
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from app.database.requests import set_user, update_user, get_card, get_user
import app.keyboards as kb

import ssl
import certifi
from geopy.geocoders import Nominatim


client = Router()

ctx = ssl.create_default_context(cafile=certifi.where())
geolocator = Nominatim(user_agent='TelegramBotForShop', ssl_context=ctx)


@client.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    is_user = await set_user(message.from_user.id)
    if not is_user:
        await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üëã\n–ü—Ä–æ–π–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è ‚úçÔ∏è',
                             reply_markup=await kb.clients_name(message.from_user.first_name))
        await state.set_state('reg_name')
    else:
        await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ–Ω–ª–∞–π–Ω-–º–∞–≥–∞–∑–∏–Ω! üëã\n\n–ò—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–æ–º –º–∞–≥–∞–∑–∏–Ω–∞ ‚¨áÔ∏è',
                             reply_markup=kb.menu)


@client.message(StateFilter('reg_name'))
async def get_reg_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text.capitalize())
    await message.answer('‚òéÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞!',
                         reply_markup=await kb.clients_phone())
    await state.set_state('reg_phone')


@client.message(F.contact, StateFilter('reg_phone'))
async def get_reg_phone_number(message: Message, state: FSMContext):
    await state.update_data(phone_number=message.contact.phone_number)
    data = await state.get_data()
    await update_user(message.from_user.id,
                      data['name'], data['phone_number'])
    await message.answer('‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω! üëã',
                         reply_markup=kb.menu)
    await state.clear()


@client.message(StateFilter('reg_phone'))
async def get_reg_phone_number(message: Message, state: FSMContext):
    await state.update_data(phone_number=message.text)
    data = await state.get_data()
    await update_user(message.from_user.id,
                      data['name'], data['phone_number'])
    await message.answer('‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω! üëã',
                         reply_markup=kb.menu)
    await state.clear()


@client.callback_query(F.data == 'categories')
@client.message(F.text == 'üõí –ö–∞—Ç–∞–ª–æ–≥')
async def catalog(event: Message | CallbackQuery):
    if isinstance(event, Message):
        await event.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞ üõç',
                             reply_markup=await kb.categories())
    else:
        await event.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥')
        await event.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞ üõç',
                                      reply_markup=await kb.categories())


@client.callback_query(F.data.startswith('category_'))
async def cards(callback: CallbackQuery):
    await callback.answer()
    category_id = callback.data.split('_')[1]
    try:
        await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä üè∑',
                                         reply_markup=await kb.cards(category_id))
    except:
        await callback.message.delete()
        await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä üè∑',
                                         reply_markup=await kb.cards(category_id))


@client.callback_query(F.data.startswith('card_'))
async def card_info(callback: CallbackQuery):
    await callback.answer()
    card_id = callback.data.split('_')[1]
    card = await get_card(card_id)
    await callback.message.delete()
    await callback.message.answer_photo(photo=card.image,
                                        caption=f'{card.name}\n\n{card.description}\n\n{card.price}RUB',
                                        reply_markup=await kb.back_to_categories(card.category_id, card_id))


@client.callback_query(F.data.startswith('buy_'))
async def client_buy_callback(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    card_id = callback.data.split('_')[1]
    await state.set_state('waiting_for_address')
    await state.update_data(card_id=card_id)
    await callback.message.answer('üìç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏',
                                  reply_markup=await kb.clients_location())


@client.message(F.location, StateFilter('waiting_for_address'))
async def getting_location(message: Message, state: FSMContext):
    data = await state.get_data()
    address = geolocator.reverse(f'{message.location.latitude}, {message.location.longitude}',
                                 exactly_one=True,
                                 language='ru')
    user = await get_user(message.from_user.id)
    card_id = data.get('card_id')

    full_info = (
        f"üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.name}, @{message.from_user.username} (ID: {user.tg_id})\n"
        f"üì≤ –¢–µ–ª–µ—Ñ–æ–Ω: {user.phone_number}\n"
        f"üìç –ê–¥—Ä–µ—Å: {address}\n"
        f"üßæ –¢–æ–≤–∞—Ä ID: {card_id}"
    )

    await message.bot.send_message(int(os.getenv('GROUP_ID')), full_info)
    await message.answer('–°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç ‚úÖ\n\n–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è...',
                         reply_markup=kb.menu)
    await state.clear()


@client.message(StateFilter('waiting_for_address'))
async def getting_location(message: Message, state: FSMContext):
    data = await state.get_data()
    address = message.text
    user = await get_user(message.from_user.id)
    card_id = data.get('card_id')

    full_info = (
        f"üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.name}, @{message.from_user.username} (ID: {user.tg_id})\n"
        f"üì≤ –¢–µ–ª–µ—Ñ–æ–Ω: {user.phone_number}\n"
        f"üìç –ê–¥—Ä–µ—Å: {address}\n"
        f"üßæ –¢–æ–≤–∞—Ä ID: {card_id}"
    )

    await message.bot.send_message(int(os.getenv('GROUP_ID')), full_info)
    await message.answer('–°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç ‚úÖ\n\n–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è...')


@client.message(F.photo)
async def get_photo(message: Message):
    await message.answer(message.photo[-1].file_id)
